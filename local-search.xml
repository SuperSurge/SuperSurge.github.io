<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>面向机器学习的python学习</title>
    <link href="/2025/10/30/%E9%9D%A2%E5%90%91%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%9A%84python%E5%AD%A6%E4%B9%A0/"/>
    <url>/2025/10/30/%E9%9D%A2%E5%90%91%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%9A%84python%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p>这是之前学习做的一些笔记，内容比较粗糙</p><h1 id="python学习"><a href="#python学习" class="headerlink" title="python学习"></a>python学习</h1><p><code>print()</code>会依次打印每个字符串，遇到逗号<code>,</code>会输出一个空格</p><p>Python允许在数字中间以<code>_</code>分隔，因此，写成<code>10_000_000_000</code>和<code>10000000000</code>是完全一样的。十六进制数也可以写成<code>0xa1b2_c3d4</code>。</p><p>如果字符串里面有很多字符都需要转义，就需要加很多<code>\</code>，为了简化，Python还允许用<code>r&#39;&#39;</code>表示<code>&#39;&#39;</code>内部的字符串默认不转义</p><p>如果字符串内部有很多换行，用<code>\n</code>写在一行里不好阅读，为了简化，Python允许用<code>&#39;&#39;&#39;...&#39;&#39;&#39;</code>的格式表示多行内容</p><p>布尔值和布尔代数的表示完全一致，一个布尔值只有<code>True</code>、<code>False</code>两种值，要么是<code>True</code>，要么是<code>False</code>，在Python中，可以直接用<code>True</code>、<code>False</code>表示布尔值（请注意大小写），也可以通过布尔运算计算出来</p><p>布尔值可以用<code>and</code>、<code>or</code>和<code>not</code>运算 （与或非）</p><p>空值是Python里一个特殊的值，用<code>None</code>表示。<code>None</code>不能理解为<code>0</code>，因为<code>0</code>是有意义的，而<code>None</code>是一个特殊的空值。</p><p>这种变量本身类型不固定的语言称之为<em>动态语言</em>，与之对应的是<em>静态语言</em>。静态语言在定义变量时必须指定变量类型，如果赋值的时候类型不匹配</p><p>高级变量类型</p><p>集合：无序、不可重复元素的组合</p><h2 id="NumPy"><a href="#NumPy" class="headerlink" title="NumPy"></a>NumPy</h2><p>创建数组：<code>np.array()</code></p><p>创建递增数组：<code>np.arange()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">arr1=np.arange(<span class="hljs-number">10</span>)<span class="hljs-comment">#从0开始，到10之前结束</span><br>arr2=np.arange(<span class="hljs-number">10</span>,<span class="hljs-number">20</span>)<span class="hljs-comment">#从10开始，到20之前结束</span><br>arr3=np.arange(<span class="hljs-number">1</span>,<span class="hljs-number">20</span>,<span class="hljs-number">2</span>)<span class="hljs-comment">#从1开始，到20之前结束，步长为2</span><br></code></pre></td></tr></table></figure><p>创建同值数组：用<code>np.zeros()</code>或<code>np.ones()</code>函数（创建的是浮点型）</p><p>创建随机数组：使用<code>np.random()</code>系列函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">arr1=np.random.random(<span class="hljs-number">5</span>)<span class="hljs-comment">#0-1均匀分布的形状为5的浮点型随机数组</span><br>arr2=(<span class="hljs-number">100</span>-<span class="hljs-number">60</span>)np.random.random((<span class="hljs-number">3</span>,<span class="hljs-number">3</span>))+<span class="hljs-number">60</span><span class="hljs-comment">#60-100范围内均匀分布的3*3随机数组</span><br>arr3=np.random.randint(<span class="hljs-number">10</span>,<span class="hljs-number">100</span>,(<span class="hljs-number">3</span>,<span class="hljs-number">3</span>))<span class="hljs-comment">#整数型随机数组：10到100形状为3*3</span><br>arr4=np.random.normal(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>))<span class="hljs-comment">#服从正态分布的随机数组 均值、标准差、形状</span><br></code></pre></td></tr></table></figure><h3 id="花式索引"><a href="#花式索引" class="headerlink" title="花式索引"></a>花式索引</h3><p>用向量来替代普通索引的行列元素，且花式索引输出的任然是一个向量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#数组的花式索引</span><br>arr1=np.arange(<span class="hljs-number">0</span>,<span class="hljs-number">90</span>,<span class="hljs-number">10</span>)<br><span class="hljs-built_in">print</span>(arr1[[<span class="hljs-number">0</span>,<span class="hljs-number">2</span>]])<br>---------------------------<br>[<span class="hljs-number">0</span> <span class="hljs-number">20</span>]<br><br><span class="hljs-comment">#矩阵的花式索引</span><br>arr2=np.arange(<span class="hljs-number">1</span>,<span class="hljs-number">17</span>),resahpe(<span class="hljs-number">4</span>,<span class="hljs-number">4</span>)<br><span class="hljs-built_in">print</span>(arr2[[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>],[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>]])<br><span class="hljs-built_in">print</span>(arr2[[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>],[<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>]])<span class="hljs-comment">#第0行第2列，第1行第一列，第2行第0列</span><br>---------------------------<br>[<span class="hljs-number">1</span> <span class="hljs-number">6</span>]<br>[<span class="hljs-number">3</span> <span class="hljs-number">6</span> <span class="hljs-number">9</span>]<br></code></pre></td></tr></table></figure><h3 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h3><p>数组的切片：与列表一样</p><p>矩阵的切片：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">arr=np.arange(<span class="hljs-number">1</span>,<span class="hljs-number">21</span>).reshape(<span class="hljs-number">4</span>,<span class="hljs-number">5</span>)<br>---------------------------------<br>[[<span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>   <span class="hljs-number">5</span>]<br> [<span class="hljs-number">6</span>  <span class="hljs-number">7</span>  <span class="hljs-number">8</span>  <span class="hljs-number">9</span>  <span class="hljs-number">10</span>]<br> [<span class="hljs-number">11</span> <span class="hljs-number">12</span> <span class="hljs-number">13</span> <span class="hljs-number">14</span> <span class="hljs-number">15</span>]<br> [<span class="hljs-number">16</span> <span class="hljs-number">17</span> <span class="hljs-number">18</span> <span class="hljs-number">19</span> <span class="hljs-number">20</span>]]<br> <br> <span class="hljs-built_in">print</span>(arr[<span class="hljs-number">1</span>:<span class="hljs-number">3</span>,<span class="hljs-number">1</span>:-<span class="hljs-number">1</span>])<span class="hljs-comment">#从第一行切到第三行之前，从第一列切到最后一列之前</span><br> ---------------------------------<br>[[ <span class="hljs-number">7</span>  <span class="hljs-number">8</span>  <span class="hljs-number">9</span>]<br> [<span class="hljs-number">12</span> <span class="hljs-number">13</span> <span class="hljs-number">14</span>]]<br> <br><span class="hljs-built_in">print</span>(arr[::<span class="hljs-number">3</span>,::<span class="hljs-number">2</span>])<span class="hljs-comment">#跳跃采样 隔3行，隔2列</span><br>[[<span class="hljs-number">1</span>  <span class="hljs-number">3</span>  <span class="hljs-number">5</span>]<br>[<span class="hljs-number">16</span> <span class="hljs-number">18</span> <span class="hljs-number">20</span>]]<br></code></pre></td></tr></table></figure><p>提取矩阵的行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">arr[<span class="hljs-number">2</span>,:]<span class="hljs-comment">#提取第二行</span><br>arr[<span class="hljs-number">1</span>:<span class="hljs-number">3</span>,:]<span class="hljs-comment">#提取1至2行</span><br>arr[<span class="hljs-number">2</span>]<span class="hljs-comment">#简便的提取列（提取行不能简写）</span><br></code></pre></td></tr></table></figure><p>提取矩阵的列：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">arr[:,<span class="hljs-number">2</span>]<span class="hljs-comment">#提取第2列（注意，输出的是向量）</span><br>arr[:,<span class="hljs-number">1</span>:<span class="hljs-number">3</span>]<span class="hljs-comment">#提取1至2列（结果是矩阵）</span><br></code></pre></td></tr></table></figure><p>提取某一单独的列时，结果的一个向量（为了节省空间）</p><p>可用reshape(-1,1)升级</p><p>数组的切片只是视图，不会创建新变量，若要创建新变量，需要用<code>.copy</code></p><p>数组的赋值是绑定 ，不会创建新变量，若要创建新变量，需要用<code>.copy</code></p><h3 id="数组的变形"><a href="#数组的变形" class="headerlink" title="数组的变形"></a>数组的变形</h3><p>数组的转置.T只对矩阵有效，因此遇到向量要先将其转化为矩阵</p><p>数组的翻转：上下翻转<code>np.flipud()</code>、左右翻转<code>np.fliplr</code>，向量只能用上下</p><p>数组的重塑：<code>.reshape()</code></p><p>数组的拼接：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#向量的拼接</span><br>arr3=np.concatenate([arr1,arr2])<br><br><span class="hljs-comment">#矩阵的拼接</span><br><span class="hljs-comment">#按第一个维度（行）拼接</span><br>arr3=np.concatenate([arr1,arr2])<span class="hljs-comment">#默认参数axis=0</span><br><span class="hljs-comment">#按第二个维度（列）拼接</span><br>arr4=np.concatenate([arr1,arr2,axis=<span class="hljs-number">1</span>])<br></code></pre></td></tr></table></figure><p>向量和矩阵不能拼接</p><h3 id="数组的分裂"><a href="#数组的分裂" class="headerlink" title="数组的分裂"></a>数组的分裂</h3><p>​<code>np.split()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#向量的分裂</span><br>arr1=np.array([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>])<br>arr2,arr3,arr4=np.split(arr1,[<span class="hljs-number">2</span>,<span class="hljs-number">3</span>])<br><span class="hljs-built_in">print</span>(arr2)<br><span class="hljs-built_in">print</span>(arr3)<br><span class="hljs-built_in">print</span>(arr4)<br>---------------------<br>[<span class="hljs-number">1</span> <span class="hljs-number">2</span>]<br>[<span class="hljs-number">3</span>]<br>[<span class="hljs-number">4</span> <span class="hljs-number">5</span>]<br><br><span class="hljs-comment">#矩阵的分裂 可以按两个维度分裂 输出的是矩阵</span><br>arr1,arr2=np.split(arr,[<span class="hljs-number">1</span>])<span class="hljs-comment">#默认参数axis=0</span><br></code></pre></td></tr></table></figure><h3 id="数组的运算"><a href="#数组的运算" class="headerlink" title="数组的运算"></a>数组的运算</h3><p>数组与系数的运算</p><p>数组与数组的运算</p><p>广播：如果向量和矩阵做运算，向量自动升级为行矩阵；如果某矩阵是行矩阵或列矩阵，则其被广播，以适配另一个矩阵的形状</p><h3 id="数组的函数"><a href="#数组的函数" class="headerlink" title="数组的函数"></a>数组的函数</h3><p>矩阵的乘积：<code>np.dot()</code>，当矩阵乘积中混有向量时，结果必为向量</p><p>常见数学函数：</p><p>​1. 绝对值函数 <code>np.abs()</code></p><p>​2. 三角函数<code>np.sin()</code>、<code>np.cos()</code>、<code>np.tan()</code></p><pre><code class="hljs">3. 指数函数`np.exp()` 4. 对数函数 `np.log()`（这个是以e为底，以其他为底可用换底公式，如以2为底：`np.log(x)/np.log(2)` 5. 聚合函数：最大值函数`np.max()`、最小值函数`np.min()`；矩阵可以设置参数axio来按维度求最大值，也可以直接整体求最大，向量没有该参数 6. 求和函数`np.sum()`、求积函数`np.prod()`；矩阵可以设置参数axio来按维度求和/积，也可以直接整体求最和/积 7. 均值函数`np.mean()`、标准差函数`np.std()`，同样可以有参数axis</code></pre><ul><li><p>当axis&#x3D;0时，最终结果和每一行的元素个数一致</p><p>当axis&#x3D;1时，最终结果和每一列的元素个数一致</p></li><li><p>考虑到大型数组有数据缺失，以上聚合函数遇到缺失值会报错，因此出现了聚合函数的安全版本，即计算时忽略缺失值：<code>np.nansum()</code>、<code>np.nanprod()</code>、&#96;&#96;np.nanmean()<code>、</code>np.nanstd()<code>、</code>np.nanmax()<code>、</code>np.nanmin()&#96;</p></li></ul><h3 id="布尔型数组"><a href="#布尔型数组" class="headerlink" title="布尔型数组"></a>布尔型数组</h3><p>1.创建布尔型数组：布尔型数组的产生离不开：&gt;、&lt;、&gt;&#x3D;、&lt;&#x3D;、&#x3D;&#x3D;、！&#x3D;</p><p>2.布尔型数组中True的数量：</p><p>​<code>np.sum()</code>：统计布尔型数组中True的个数</p><p>​<code>np.any()</code>：只要布尔型数组里含有1个True，就返回True</p><p>​<code>np.all()</code>：布尔型数组里全是True才返回True</p><p>3.布尔型数组作为掩码：若一个普通数组和一个布尔型数组维度相同，可以将布尔型数组作为普通数组的掩码，这样可以对普通数组中的元素进行筛选</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">arr=np.arange(<span class="hljs-number">1</span>,<span class="hljs-number">13</span>).reshape(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>)<br><span class="hljs-built_in">print</span>(arr[arr&gt;<span class="hljs-number">4</span>])<br><span class="hljs-comment">#筛选出arr&gt;4的元素，注意，矩阵进行掩码操作后，退化成了向量</span><br></code></pre></td></tr></table></figure><p>4.满足条件的元素所在位置：<code>np.where()</code>，输出一个元组，第一个元素是满足条件元素所在位置，第二个元素是数组类型</p><h3 id="数组到张量"><a href="#数组到张量" class="headerlink" title="数组到张量"></a>数组到张量</h3><p>Pytorch 把NumPy语法吸收</p><ul><li>Numpy与Pytorch基础语法几乎一致<ul><li>np对应torch</li><li>数组array对应张量tensor</li><li>NumPy的n维数组对应Pytorch的n阶张量</li></ul></li><li>数组与张量之间可以相互转换：<ul><li>arr转换为ts：ts&#x3D;torch.tensor(arr)</li><li>ts转换为arr：arr&#x3D;np.array(ts)</li></ul></li></ul><p>语法不同点：</p><p><img src="C:\Users\16439\AppData\Roaming\Typora\typora-user-images\image-20250913144340396.png" alt="image-20250913144340396"></p><h2 id="Pandas"><a href="#Pandas" class="headerlink" title="Pandas"></a>Pandas</h2><h3 id="一维对象"><a href="#一维对象" class="headerlink" title="一维对象"></a>一维对象</h3><p>一维对象的创建</p><p>字典创建法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">dict</span>=&#123;<span class="hljs-string">&#x27;a&#x27;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;b&#x27;</span>:<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;c&#x27;</span>:<span class="hljs-number">3</span>&#125;<br>sr=pd.Series(<span class="hljs-built_in">dict</span>)<br><span class="hljs-built_in">print</span>(sr)<br></code></pre></td></tr></table></figure><p>数组创建法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">v=[<span class="hljs-number">0</span>,<span class="hljs-number">0.5</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>]<br>k=[<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>]<br>sr=pd.Series(v,index=k)<br><span class="hljs-built_in">print</span>(sr)<br></code></pre></td></tr></table></figure><p>values可以是列表、数组、张量，index可以省略，省略后索引从0开始</p><p>一维对象有两个属性：values、index：<code>sr.values</code>、<code>sr.index</code>，不管values以什么方式创建，最终输出的values都是数组</p><h3 id="二维对象"><a href="#二维对象" class="headerlink" title="二维对象"></a>二维对象</h3><p>二维对象的创建</p><p>二维对象面向矩阵，不仅有行标签index，还有列标签columns</p><p>字典创建法：</p><p>必须基于多个Series对象，每个Series对象就是一个列数据，相当于一列一列的数据作拼接</p><p>创建Series对象时，字典的键是index，其延展方向是竖直方向</p><p>创建DataFrame对象时，字典的键是columns，其延展方向是水平方向</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python">v=[<span class="hljs-number">11</span>,<span class="hljs-number">5</span>,<span class="hljs-number">23</span>,<span class="hljs-number">21</span>]<br>k=[<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>]<br>sr1=pd.Series(v,index=k)<br><br>v2=[<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-string">&#x27;女&#x27;</span>,<span class="hljs-string">&#x27;女&#x27;</span>]<br>sr2=pd.Series(v2,index=k)<br><br>df=pd.DataFrame(&#123;<span class="hljs-string">&#x27;年龄&#x27;</span>:sr1,<span class="hljs-string">&#x27;性别&#x27;</span>:sr2&#125;)<br><span class="hljs-built_in">print</span>(df)<br>--------------------------<br>   年龄 性别<br><span class="hljs-number">1</span>  <span class="hljs-number">11</span>  男<br><span class="hljs-number">2</span>   <span class="hljs-number">5</span>  男<br><span class="hljs-number">3</span>  <span class="hljs-number">23</span>  女<br><span class="hljs-number">4</span>  <span class="hljs-number">21</span>  女<br><br><br><span class="hljs-comment">#如果sr1、sr2的index不一致，会取交集，并且有缺失值</span><br>v=[<span class="hljs-number">11</span>,<span class="hljs-number">5</span>,<span class="hljs-number">23</span>,<span class="hljs-number">21</span>]<br>k=[<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>]<br>sr1=pd.Series(v,index=k)<br><br>v2=[<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-string">&#x27;女&#x27;</span>,<span class="hljs-string">&#x27;女&#x27;</span>]<br>k2=[<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>,<span class="hljs-string">&#x27;5&#x27;</span>]<br>sr2=pd.Series(v2,index=k2)<br><br>df=pd.DataFrame(&#123;<span class="hljs-string">&#x27;年龄&#x27;</span>:sr1,<span class="hljs-string">&#x27;性别&#x27;</span>:sr2&#125;)<br><span class="hljs-built_in">print</span>(df)<br>-----------------------------<br>     年龄   性别<br><span class="hljs-number">1</span>  <span class="hljs-number">11.0</span>    男<br><span class="hljs-number">2</span>   <span class="hljs-number">5.0</span>    男<br><span class="hljs-number">3</span>  <span class="hljs-number">23.0</span>    女<br><span class="hljs-number">4</span>  <span class="hljs-number">21.0</span>  NaN<br><span class="hljs-number">5</span>   NaN    女<br></code></pre></td></tr></table></figure><p>数组创建法</p><p>直接给pd.DataFrame参数，第一个参数是values（数组），第二个参数是行标签index，第二个参数是列标签columns，其中index和columns可以省略，省略后即从0开始的顺序数字</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 设定键值</span><br>v=np.array([[<span class="hljs-number">53</span>,<span class="hljs-string">&#x27;female&#x27;</span>],[<span class="hljs-number">64</span>,<span class="hljs-string">&#x27;male&#x27;</span>],[<span class="hljs-number">72</span>,<span class="hljs-string">&#x27;male&#x27;</span>],[<span class="hljs-number">82</span>,<span class="hljs-string">&#x27;female&#x27;</span>]])<br>i=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]<br>c=[<span class="hljs-string">&#x27;年龄&#x27;</span>,<span class="hljs-string">&#x27;性别&#x27;</span>]<br><br>df=pd.DataFrame(v,index=i,columns=c)<br><span class="hljs-built_in">print</span>(df)<br>------------------------<br>   年龄      性别<br><span class="hljs-number">1</span>  <span class="hljs-number">53</span>  female<br><span class="hljs-number">2</span>  <span class="hljs-number">64</span>    male<br><span class="hljs-number">3</span>  <span class="hljs-number">72</span>    male<br><span class="hljs-number">4</span>  <span class="hljs-number">82</span>  female<br></code></pre></td></tr></table></figure><p>二维对象有三个属性：values、index、columns：<code>df.values</code>、<code>df.index</code>、<code>df.columns</code>，不管values以什么方式创建，最终输出的values都是数组</p><p>当想要Pandas对象退化为NumPy时，查看其values属性即可</p><h3 id="对象的索引"><a href="#对象的索引" class="headerlink" title="对象的索引"></a>对象的索引</h3><p>pandas的索引分为显示索引和隐式索引，显示是使用pandas对象提供的索引，隐式是使用数组本身自带的从0开始的索引</p><p>防止索引是整数时显示索引和隐式索引会出错，于是有索引器，loc（显示）、iloc（隐式）</p><h4 id="一维对象索引"><a href="#一维对象索引" class="headerlink" title="一维对象索引"></a>一维对象索引</h4><p>访问切片时，用显示索引，如：<code>&#39;一号&#39;:&#39;三号&#39;</code>时，包括了结尾时的三号，但是隐式索引还是和原来一样</p><p>同样切片仅是视图，对象赋值仅是绑定</p><h4 id="二维对象索引"><a href="#二维对象索引" class="headerlink" title="二维对象索引"></a>二维对象索引</h4><p>在二维对象中，索引器不能去掉，否则会报错</p><p>显示索引中，提取矩阵的行或列还有一种简便写法</p><ul><li>提取二维对象的行：df.iloc[‘三号’]（原理是省略后面的冒号，隐式也可以）</li><li>提取二维对象的列：df[‘年龄’]（原理是列标签本来就是二维对象的键）</li></ul><h3 id="对象的变形"><a href="#对象的变形" class="headerlink" title="对象的变形"></a>对象的变形</h3><p>对象的转置：<code>df.T</code></p><p>对象的翻转：左右翻转<code>df=df.iloc[:,::-1]</code>、上下翻转<code>df.iloc[::-1,:]</code></p><p>对象的重塑：考虑到对象是含有行列标签的，.reshape()已不再适用，因此对象的重塑没有那么灵活。但是可以做到将sr并入df，也可以将df割出sr</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python">v1=[<span class="hljs-number">11</span>,<span class="hljs-number">5</span>,<span class="hljs-number">23</span>,<span class="hljs-number">21</span>]<br>k=[<span class="hljs-string">&#x27;1号&#x27;</span>,<span class="hljs-string">&#x27;2号&#x27;</span>,<span class="hljs-string">&#x27;3号&#x27;</span>,<span class="hljs-string">&#x27;4号&#x27;</span>]<br>sr1=pd.Series(v1,index=k)<br><br>v2=[<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-string">&#x27;女&#x27;</span>,<span class="hljs-string">&#x27;女&#x27;</span>]<br>sr2=pd.Series(v2,index=k)<br><br>df=pd.DataFrame(&#123;<span class="hljs-string">&#x27;年龄&#x27;</span>:sr1,<span class="hljs-string">&#x27;性别&#x27;</span>:sr2&#125;)<br><br>v3=[<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>]<br>sr3=pd.Series(v3,index=k)<br>df[<span class="hljs-string">&#x27;牌照&#x27;</span>]=sr3<br><span class="hljs-built_in">print</span>(df)<br>----------------<br>    年龄 性别 牌照<br><span class="hljs-number">1</span>号  <span class="hljs-number">11</span>  男  <span class="hljs-number">1</span><br><span class="hljs-number">2</span>号   <span class="hljs-number">5</span>  男  <span class="hljs-number">2</span><br><span class="hljs-number">3</span>号  <span class="hljs-number">23</span>  女  <span class="hljs-number">3</span><br><span class="hljs-number">4</span>号  <span class="hljs-number">21</span>  女  <span class="hljs-number">4</span><br><br><br>sr4=df[<span class="hljs-string">&#x27;年龄&#x27;</span>]<br><span class="hljs-built_in">print</span>(sr4)<br>---------------<br><span class="hljs-number">1</span>号    <span class="hljs-number">11</span><br><span class="hljs-number">2</span>号     <span class="hljs-number">5</span><br><span class="hljs-number">3</span>号    <span class="hljs-number">23</span><br><span class="hljs-number">4</span>号    <span class="hljs-number">21</span><br>Name: 年龄, dtype: int64<br></code></pre></td></tr></table></figure><p>对象的拼接： pd.concat()函数，与np.concatenate()语法相似</p><p>一维对象的合并</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">v1=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]<br>v2=[<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>]<br>k1=[<span class="hljs-string">&#x27;1号&#x27;</span>,<span class="hljs-string">&#x27;2号&#x27;</span>,<span class="hljs-string">&#x27;3号&#x27;</span>,<span class="hljs-string">&#x27;4号&#x27;</span>]<br>k2=[<span class="hljs-string">&#x27;4号&#x27;</span>,<span class="hljs-string">&#x27;5号&#x27;</span>,<span class="hljs-string">&#x27;6号&#x27;</span>]<br>sr1=pd.Series(v1,index=k1)<br>sr2=pd.Series(v2,index=k2)<br>sr=pd.concat([sr1,sr2],axis=<span class="hljs-number">0</span>)<br><span class="hljs-built_in">print</span>(sr)<br>------------------<br><span class="hljs-number">1</span>号    <span class="hljs-number">1</span><br><span class="hljs-number">2</span>号    <span class="hljs-number">2</span><br><span class="hljs-number">3</span>号    <span class="hljs-number">3</span><br><span class="hljs-number">4</span>号    <span class="hljs-number">4</span><br><span class="hljs-number">4</span>号    <span class="hljs-number">5</span><br><span class="hljs-number">5</span>号    <span class="hljs-number">6</span><br><span class="hljs-number">6</span>号    <span class="hljs-number">7</span><br></code></pre></td></tr></table></figure><p>pandas对象的属性放弃了集合和字典索引中“不可重复“的特性，检验是否重复：对对象的属性.index或.columns使用.is_unique即可检查，返回True表示行或列不重复，False表示有重复</p><p>一维对象和二维对象的合并：可以理解为给二位对象加上一行或者一列，因此不必使用pd.concat()函数，只需借助”二维对象的索引“</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">df[<span class="hljs-string">&#x27;牌照&#x27;</span>]=sr3<br>df.loc[<span class="hljs-string">&#x27;4号&#x27;</span>]=[<span class="hljs-number">40</span>,<span class="hljs-string">&#x27;女&#x27;</span>,<span class="hljs-number">4</span>]<br></code></pre></td></tr></table></figure><p>二维对象的合并</p><p>依然使用pd.concat()函数，多了一个axis参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs python">v1=[[<span class="hljs-number">10</span>,<span class="hljs-string">&#x27;w&#x27;</span>],[<span class="hljs-number">20</span>,<span class="hljs-string">&#x27;m&#x27;</span>],[<span class="hljs-number">30</span>,<span class="hljs-string">&#x27;m&#x27;</span>],[<span class="hljs-number">40</span>,<span class="hljs-string">&#x27;w&#x27;</span>]]<br>v2=[[<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;y&#x27;</span>],[<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;y&#x27;</span>],[<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;y&#x27;</span>],[<span class="hljs-number">4</span>,<span class="hljs-string">&#x27;n&#x27;</span>]]<br>v3=[[<span class="hljs-number">50</span>,<span class="hljs-string">&#x27;m&#x27;</span>,<span class="hljs-number">5</span>,<span class="hljs-string">&#x27;y&#x27;</span>],[<span class="hljs-number">30</span>,<span class="hljs-string">&#x27;w&#x27;</span>,<span class="hljs-number">6</span>,<span class="hljs-string">&#x27;n&#x27;</span>]]<br>i1=[<span class="hljs-string">&#x27;1号&#x27;</span>,<span class="hljs-string">&#x27;2号&#x27;</span>,<span class="hljs-string">&#x27;3号&#x27;</span>,<span class="hljs-string">&#x27;4号&#x27;</span>]<br>i2=[<span class="hljs-string">&#x27;1号&#x27;</span>,<span class="hljs-string">&#x27;2号&#x27;</span>,<span class="hljs-string">&#x27;3号&#x27;</span>,<span class="hljs-string">&#x27;4号&#x27;</span>]<br>i3=[<span class="hljs-string">&#x27;5号&#x27;</span>,<span class="hljs-string">&#x27;6号&#x27;</span>]<br>c1=[<span class="hljs-string">&#x27;age&#x27;</span>,<span class="hljs-string">&#x27;sex&#x27;</span>]<br>c2=[<span class="hljs-string">&#x27;id&#x27;</span>,<span class="hljs-string">&#x27;ikun&#x27;</span>]<br>c3=[<span class="hljs-string">&#x27;age&#x27;</span>,<span class="hljs-string">&#x27;sex&#x27;</span>,<span class="hljs-string">&#x27;id&#x27;</span>,<span class="hljs-string">&#x27;ikun&#x27;</span>]<br>df1=pd.DataFrame(v1,index=i1,columns=c1)<br>df2=pd.DataFrame(v2,index=i2,columns=c2)<br>df3=pd.DataFrame(v3,index=i3,columns=c3)<br><span class="hljs-built_in">print</span>(df1)<br><span class="hljs-built_in">print</span>(df2)<br><span class="hljs-built_in">print</span>(df3)<br>---------------------<br>    age sex<br><span class="hljs-number">1</span>号   <span class="hljs-number">10</span>   w<br><span class="hljs-number">2</span>号   <span class="hljs-number">20</span>   m<br><span class="hljs-number">3</span>号   <span class="hljs-number">30</span>   m<br><span class="hljs-number">4</span>号   <span class="hljs-number">40</span>   w<br>    <span class="hljs-built_in">id</span> ikun<br><span class="hljs-number">1</span>号   <span class="hljs-number">1</span>    y<br><span class="hljs-number">2</span>号   <span class="hljs-number">2</span>    y<br><span class="hljs-number">3</span>号   <span class="hljs-number">3</span>    y<br><span class="hljs-number">4</span>号   <span class="hljs-number">4</span>    n<br>    age sex  <span class="hljs-built_in">id</span> ikun<br><span class="hljs-number">5</span>号   <span class="hljs-number">50</span>   m   <span class="hljs-number">5</span>    y<br><span class="hljs-number">6</span>号   <span class="hljs-number">30</span>   w   <span class="hljs-number">6</span>    n<br><br><br>df=pd.concat([df1,df2],axis=<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(df)<br>-----------------------<br>    age sex  <span class="hljs-built_in">id</span> ikun<br><span class="hljs-number">1</span>号   <span class="hljs-number">10</span>   w   <span class="hljs-number">1</span>    y<br><span class="hljs-number">2</span>号   <span class="hljs-number">20</span>   m   <span class="hljs-number">2</span>    y<br><span class="hljs-number">3</span>号   <span class="hljs-number">30</span>   m   <span class="hljs-number">3</span>    y<br><span class="hljs-number">4</span>号   <span class="hljs-number">40</span>   w   <span class="hljs-number">4</span>    n<br><br><br>df=pd.concat([df,df3],axis=<span class="hljs-number">0</span>)<br><span class="hljs-built_in">print</span>(df)<br>-----------------------<br>    age sex  <span class="hljs-built_in">id</span> ikun<br><span class="hljs-number">1</span>号   <span class="hljs-number">10</span>   w   <span class="hljs-number">1</span>    y<br><span class="hljs-number">2</span>号   <span class="hljs-number">20</span>   m   <span class="hljs-number">2</span>    y<br><span class="hljs-number">3</span>号   <span class="hljs-number">30</span>   m   <span class="hljs-number">3</span>    y<br><span class="hljs-number">4</span>号   <span class="hljs-number">40</span>   w   <span class="hljs-number">4</span>    n<br><span class="hljs-number">5</span>号   <span class="hljs-number">50</span>   m   <span class="hljs-number">5</span>    y<br><span class="hljs-number">6</span>号   <span class="hljs-number">30</span>   w   <span class="hljs-number">6</span>    n<br></code></pre></td></tr></table></figure><h3 id="对象的运算"><a href="#对象的运算" class="headerlink" title="对象的运算"></a>对象的运算</h3><p>对象与系数之间的运算</p><p>对象与对象运算：必须保证都是数字型对象，两个对象之间的维度可以不同</p><p>​一维对象之间的运算</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">v1=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]<br>v2=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br>k1=[<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>]<br>k2=[<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>]<br>sr1=pd.Series(v1,index=k1)<br>sr2=pd.Series(v2,index=k2)<br><br><span class="hljs-built_in">print</span>(sr1+sr2)<br>---------------------<br><span class="hljs-number">1</span>    <span class="hljs-number">2.0</span><br><span class="hljs-number">2</span>    <span class="hljs-number">4.0</span><br><span class="hljs-number">3</span>    <span class="hljs-number">6.0</span><br><span class="hljs-number">4</span>    NaN<br>dtype: float64<br></code></pre></td></tr></table></figure><p>​二维对象之间的运算</p><p>注：</p><ul><li>使用np.abs()、np.cos()、np.exp()、np.log()等数学函数时，会保留索引（可以直接对对象使用）</li><li>pandas中任然存在布尔型对象，用法与numpy无益，会保留索引</li></ul><h3 id="对象的缺失值"><a href="#对象的缺失值" class="headerlink" title="对象的缺失值"></a>对象的缺失值</h3><p>发现缺失值：用.isnull()方法，发现sr的缺失值：sr.isnull()；发现df的缺失值：df.isnull()</p><p>剔除缺失值：用.dropna()方法，一维对象很好剔除，二位对象比较复杂，要么单独剔除df中含有缺失值的行，要么剔除含有缺失值的列（一般剔除行，一行是一个对象，默认axio&#x3D;0），当某行全部都是缺失值才剔除可以设置：df.dropna(how&#x3D;’all’)</p><p>填补缺失值：使用.fillna()方法，实际的数据填充没有统一的方法，很灵活</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#一维对象填充</span><br><br>sr1.fillna(<span class="hljs-number">0</span>)<span class="hljs-comment">#用0填充</span><br>sr1.fillna(np.mean(sr1))<span class="hljs-comment">#用均值填充</span><br>sr1.fillna(method=<span class="hljs-string">&#x27;ffill&#x27;</span>)<span class="hljs-comment">#用前值填充</span><br>sr1.fillna(method=<span class="hljs-string">&#x27;bfill&#x27;</span>)<span class="hljs-comment">#用后值填充</span><br><br><span class="hljs-comment">#二维对象一样，只是会自动按同一列的均值或者前值填充</span><br></code></pre></td></tr></table></figure><h3 id="导入Excel文件"><a href="#导入Excel文件" class="headerlink" title="导入Excel文件"></a>导入Excel文件</h3><p>创建excel文件，录入信息，第一列为index，第一行为columns。另存为csv文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">df=pd.read_csv(<span class="hljs-string">&#x27;data.csv&#x27;</span>,index_col=<span class="hljs-number">0</span>)<br>arr=df.values<span class="hljs-comment">#提取纯数组</span><br><span class="hljs-built_in">print</span>(df)<br><span class="hljs-built_in">print</span>(arr)<br>------------<br>    age gender  num<br><span class="hljs-number">1</span>号   <span class="hljs-number">10</span>      女    <span class="hljs-number">1</span><br><span class="hljs-number">2</span>号   <span class="hljs-number">52</span>      男    <span class="hljs-number">2</span><br><br>[[<span class="hljs-number">10</span> <span class="hljs-string">&#x27;女&#x27;</span> <span class="hljs-number">1</span>]<br> [<span class="hljs-number">52</span> <span class="hljs-string">&#x27;男&#x27;</span> <span class="hljs-number">2</span>]]<br><br></code></pre></td></tr></table></figure><h3 id="数据分析"><a href="#数据分析" class="headerlink" title="数据分析"></a>数据分析</h3><ol><li><p>导入数据</p></li><li><p>聚合方法</p><p>df.head()，仅输出前五行；numpy中所有的聚合函数对pandas对象也适用，此外，pandas将这些函数变为对象的方法，这样，不导入numpy也能使用，如df.max()、df.min()、df.mean()、df.sum()、df.std()等；这些方法中像numpy一样有默认值为0的参数axis，一般不要将其手动设定为1，因为这种情况在数据分析中毫无意义，此外这些方法都忽略的缺失值，属于numpy聚合函数的安全版本</p></li><li><p>描述方法，可以使用.describe()方法直接查看所有聚合函数的信息</p></li><li><p>数据透视：如泰坦尼克号，df.pivot_table(‘Survived’,index&#x3D;’Sex’)、df.pivot_table(‘Survived’,index&#x3D;’Sex’,columns&#x3D;’Pclass’)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#一个特征：性别</span><br>Survived<br>Sex          <br><span class="hljs-number">0</span>    <span class="hljs-number">0.188908</span><br><span class="hljs-number">1</span>    <span class="hljs-number">0.742038</span><br><br><span class="hljs-comment">#两个特征：性别、船舱等级</span><br>Pclass         <span class="hljs-number">1</span>         <span class="hljs-number">2</span>         <span class="hljs-number">3</span><br>Sex                                 <br><span class="hljs-number">0</span>       <span class="hljs-number">0.368852</span>  <span class="hljs-number">0.157407</span>  <span class="hljs-number">0.135447</span><br><span class="hljs-number">1</span>       <span class="hljs-number">0.968085</span>  <span class="hljs-number">0.921053</span>  <span class="hljs-number">0.500000</span><br></code></pre></td></tr></table></figure><p>数据透视表的数值默认是输出特征的均值，行标签和列标签变成了它的输入特征</p><p>.pivot_table()方法有个很重要的参数：aggfunc，其默认值是’mean’（输出为0和1时，刚好是概率），除此以外，所有聚合函数’max’、’min’、’sum’、’count’均可使用</p><p>多个特征的数据透视：有些数据很分散，就要用到pd.cut()、pd.qcut()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python">age=pd.cut(df[<span class="hljs-string">&#x27;Age&#x27;</span>],[<span class="hljs-number">0</span>,<span class="hljs-number">25</span>,<span class="hljs-number">120</span>])<br><span class="hljs-built_in">print</span>(age)<br>---------------<br><span class="hljs-number">0</span>        (<span class="hljs-number">0.0</span>, <span class="hljs-number">25.0</span>]<br><span class="hljs-number">1</span>      (<span class="hljs-number">25.0</span>, <span class="hljs-number">120.0</span>]<br><span class="hljs-number">2</span>      (<span class="hljs-number">25.0</span>, <span class="hljs-number">120.0</span>]<br><span class="hljs-number">3</span>      (<span class="hljs-number">25.0</span>, <span class="hljs-number">120.0</span>]<br><span class="hljs-number">4</span>      (<span class="hljs-number">25.0</span>, <span class="hljs-number">120.0</span>]<br>           ...      <br><span class="hljs-number">886</span>    (<span class="hljs-number">25.0</span>, <span class="hljs-number">120.0</span>]<br><span class="hljs-number">887</span>      (<span class="hljs-number">0.0</span>, <span class="hljs-number">25.0</span>]<br><span class="hljs-number">888</span>              NaN<br><span class="hljs-number">889</span>    (<span class="hljs-number">25.0</span>, <span class="hljs-number">120.0</span>]<br><span class="hljs-number">890</span>    (<span class="hljs-number">25.0</span>, <span class="hljs-number">120.0</span>]<br>Name: Age, Length: <span class="hljs-number">891</span>, dtype: category<br>Categories (<span class="hljs-number">2</span>, interval[int64, right]): [(<span class="hljs-number">0</span>, <span class="hljs-number">25</span>] &lt; (<span class="hljs-number">25</span>, <span class="hljs-number">120</span>]]<br><br>把连续的列变为像男女这种离散的列<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">age=pd.cut(df[<span class="hljs-string">&#x27;Age&#x27;</span>],[<span class="hljs-number">0</span>,<span class="hljs-number">25</span>,<span class="hljs-number">120</span>])<br><span class="hljs-built_in">print</span>(df.pivot_table(<span class="hljs-string">&#x27;Survived&#x27;</span>,index=[<span class="hljs-string">&#x27;Sex&#x27;</span>,age],columns=[<span class="hljs-string">&#x27;Pclass&#x27;</span>]))<br>---------------------------<br>Pclass                <span class="hljs-number">1</span>         <span class="hljs-number">2</span>         <span class="hljs-number">3</span><br>Sex Age                                    <br><span class="hljs-number">0</span>   (<span class="hljs-number">0</span>, <span class="hljs-number">25</span>]    <span class="hljs-number">0.500000</span>  <span class="hljs-number">0.277778</span>  <span class="hljs-number">0.155039</span><br>    (<span class="hljs-number">25</span>, <span class="hljs-number">120</span>]  <span class="hljs-number">0.379310</span>  <span class="hljs-number">0.079365</span>  <span class="hljs-number">0.145161</span><br><span class="hljs-number">1</span>   (<span class="hljs-number">0</span>, <span class="hljs-number">25</span>]    <span class="hljs-number">0.928571</span>  <span class="hljs-number">0.965517</span>  <span class="hljs-number">0.507692</span><br>    (<span class="hljs-number">25</span>, <span class="hljs-number">120</span>]  <span class="hljs-number">0.982456</span>  <span class="hljs-number">0.888889</span>  <span class="hljs-number">0.378378</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python">fare=pd.qcut(df[<span class="hljs-string">&#x27;Fare&#x27;</span>],<span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(fare)<br>--------------<br><span class="hljs-number">0</span>       (-<span class="hljs-number">0.001</span>, <span class="hljs-number">14.454</span>]<br><span class="hljs-number">1</span>      (<span class="hljs-number">14.454</span>, <span class="hljs-number">512.329</span>]<br><span class="hljs-number">2</span>       (-<span class="hljs-number">0.001</span>, <span class="hljs-number">14.454</span>]<br><span class="hljs-number">3</span>      (<span class="hljs-number">14.454</span>, <span class="hljs-number">512.329</span>]<br><span class="hljs-number">4</span>       (-<span class="hljs-number">0.001</span>, <span class="hljs-number">14.454</span>]<br>             ...        <br><span class="hljs-number">886</span>     (-<span class="hljs-number">0.001</span>, <span class="hljs-number">14.454</span>]<br><span class="hljs-number">887</span>    (<span class="hljs-number">14.454</span>, <span class="hljs-number">512.329</span>]<br><span class="hljs-number">888</span>    (<span class="hljs-number">14.454</span>, <span class="hljs-number">512.329</span>]<br><span class="hljs-number">889</span>    (<span class="hljs-number">14.454</span>, <span class="hljs-number">512.329</span>]<br><span class="hljs-number">890</span>     (-<span class="hljs-number">0.001</span>, <span class="hljs-number">14.454</span>]<br>Name: Fare, Length: <span class="hljs-number">891</span>, dtype: category<br>Categories (<span class="hljs-number">2</span>, interval[float64, right]): [(-<span class="hljs-number">0.001</span>, <span class="hljs-number">14.454</span>] &lt; (<span class="hljs-number">14.454</span>, <span class="hljs-number">512.329</span>]]<br>                                                               自动分割成两部分<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">age=pd.cut(df[<span class="hljs-string">&#x27;Age&#x27;</span>],[<span class="hljs-number">0</span>,<span class="hljs-number">25</span>,<span class="hljs-number">120</span>])<br><br>fare=pd.qcut(df[<span class="hljs-string">&#x27;Fare&#x27;</span>],<span class="hljs-number">2</span>)<br><br><span class="hljs-built_in">print</span>(df.pivot_table(<span class="hljs-string">&#x27;Survived&#x27;</span>,index=[<span class="hljs-string">&#x27;Pclass&#x27;</span>,fare],columns=[<span class="hljs-string">&#x27;Sex&#x27;</span>,age]))<br>------------------<br>Sex                              <span class="hljs-number">0</span>                   <span class="hljs-number">1</span>          <br>Age                        (<span class="hljs-number">0</span>, <span class="hljs-number">25</span>] (<span class="hljs-number">25</span>, <span class="hljs-number">120</span>]   (<span class="hljs-number">0</span>, <span class="hljs-number">25</span>] (<span class="hljs-number">25</span>, <span class="hljs-number">120</span>]<br>Pclass Fare                                                     <br><span class="hljs-number">1</span>      (-<span class="hljs-number">0.001</span>, <span class="hljs-number">14.454</span>]        NaN  <span class="hljs-number">0.000000</span>       NaN       NaN<br>       (<span class="hljs-number">14.454</span>, <span class="hljs-number">512.329</span>]  <span class="hljs-number">0.500000</span>  <span class="hljs-number">0.397590</span>  <span class="hljs-number">0.928571</span>  <span class="hljs-number">0.982456</span><br><span class="hljs-number">2</span>      (-<span class="hljs-number">0.001</span>, <span class="hljs-number">14.454</span>]   <span class="hljs-number">0.055556</span>  <span class="hljs-number">0.108108</span>  <span class="hljs-number">0.857143</span>  <span class="hljs-number">0.904762</span><br>       (<span class="hljs-number">14.454</span>, <span class="hljs-number">512.329</span>]  <span class="hljs-number">0.500000</span>  <span class="hljs-number">0.038462</span>  <span class="hljs-number">1.000000</span>  <span class="hljs-number">0.875000</span><br><span class="hljs-number">3</span>      (-<span class="hljs-number">0.001</span>, <span class="hljs-number">14.454</span>]   <span class="hljs-number">0.147368</span>  <span class="hljs-number">0.134615</span>  <span class="hljs-number">0.589744</span>  <span class="hljs-number">0.444444</span><br>       (<span class="hljs-number">14.454</span>, <span class="hljs-number">512.329</span>]  <span class="hljs-number">0.176471</span>  <span class="hljs-number">0.200000</span>  <span class="hljs-number">0.384615</span>  <span class="hljs-number">0.315789</span><br><br></code></pre></td></tr></table></figure><p>建议手动分割</p></li></ol><h2 id="Matplotlib"><a href="#Matplotlib" class="headerlink" title="Matplotlib"></a>Matplotlib</h2><h3 id="绘图基础"><a href="#绘图基础" class="headerlink" title="绘图基础"></a>绘图基础</h3><p><strong>绘制图像</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>fig1=plt.figure()       <span class="hljs-comment">#创建新图窗</span><br>x=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]           <span class="hljs-comment">#数据的x值</span><br>y=[<span class="hljs-number">1</span>,<span class="hljs-number">7</span>,<span class="hljs-number">34</span>,<span class="hljs-number">23</span>,<span class="hljs-number">124</span>]       <span class="hljs-comment">#数据的y值</span><br>plt.plot(x,y)     <span class="hljs-comment">#plot函数：先描点，再连线</span><br>plt.show()<br></code></pre></td></tr></table></figure><p>但是图形太浑浊</p><p>添加：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> matplotlib_inline <span class="hljs-keyword">import</span> backend_inline<br>backend_inline.set_matplotlib_formats(<span class="hljs-string">&#x27;svg&#x27;</span>)<br></code></pre></td></tr></table></figure><p>显示高清图</p><p><strong>保存图像</strong>：用<code>.savefig()</code>的方法，其需要一个r字符串：r’绝对路径\图像名.后缀’；后缀：eps、jpg、pdf、png、ps、svg等，为了保存清晰的图，推荐保存svg矢量格式，保存为svg格式后，可直接拖至word或visio中，即可显示高清矢量图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">Fig1.savefig(<span class="hljs-string">r&#x27;C:\Users\xxx\Desktop\name.svg&#x27;</span>)<br></code></pre></td></tr></table></figure><p>两种画图方式：Matlab方式（推荐）和面向对象方式（先创建图窗，然后创建坐标轴，ax&#x3D;plt.axes()，再ax.lpot(x,y) ）</p><h3 id="多图像绘制"><a href="#多图像绘制" class="headerlink" title="多图像绘制"></a>多图像绘制</h3><p>jupyter中某个代码块Fig1&#x3D;plt.figure()创建图窗后，其范围仅仅在此代码块中，跳出此代码块的其它画图命令和Fig1无关</p><p><strong>绘制多线条</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">Fig1=plt.figure()<br>x=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br>y1=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br>y2=[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>]<br>y3=[-<span class="hljs-number">1</span>,-<span class="hljs-number">2</span>,-<span class="hljs-number">3</span>,-<span class="hljs-number">4</span>,-<span class="hljs-number">5</span>]<br>plt.plot(x,y1)<br>plt.plot(x,y2)<br>plt.plot(x,y3)<br>plt.show()<br></code></pre></td></tr></table></figure><p><strong>绘制多个子图</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python">x=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br>y1=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br>y2=[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>]<br>y3=[-<span class="hljs-number">1</span>,-<span class="hljs-number">2</span>,-<span class="hljs-number">3</span>,-<span class="hljs-number">4</span>,-<span class="hljs-number">5</span>]<br><br><span class="hljs-comment">#Matlab方式，（3，1，1）表示按三行一列的方式排，此图是第一个子图</span><br>Fig1=plt.figure()<br>plt.subplot(<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>),plt.plot(x,y1)<br>plt.subplot(<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>),plt.plot(x,y2)<br>plt.subplot(<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>),plt.plot(x,y3)<br>plt.show()<br><br><span class="hljs-comment">#面向对象方式</span><br>Fig2,ax2=plt.subplots(<span class="hljs-number">3</span>)<br>ax2[<span class="hljs-number">0</span>].plot(x,y1)<br>ax2[<span class="hljs-number">1</span>].plot(x,y2)<br>ax2[<span class="hljs-number">2</span>].plot(x,y3)<br>plt.show()<br></code></pre></td></tr></table></figure><h3 id="图表类型"><a href="#图表类型" class="headerlink" title="图表类型"></a>图表类型</h3><p>plt提供了5类基本图表：二维图，网格图，统计图，轮廓图，三维图</p><p>官网详情：<a href="https://matplotlib.org/stable/plot_types/index">https://matplotlib.org/stable/plot_types/index</a></p><p><strong>二维图</strong>：只需要两个向量即可绘图，其中线型图（plot()）可以代替其他所有二维图</p><ol><li>设置颜色：color关键字</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">x=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br>y1=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br>y2=[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>]<br>y3=[-<span class="hljs-number">1</span>,-<span class="hljs-number">2</span>,-<span class="hljs-number">3</span>,-<span class="hljs-number">4</span>,-<span class="hljs-number">5</span>]<br>Fig1=plt.figure()<br>plt.plot(x,y1,color=<span class="hljs-string">&#x27;#7CB5EC&#x27;</span>)<br>plt.plot(x,y2)<br>plt.plot(x,y3)<br>plt.show()<br></code></pre></td></tr></table></figure><ol start="2"><li>设置风格</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">Fig1=plt.figure()<br>plt.plot(x,y1,linestyle=<span class="hljs-string">&#x27;-&#x27;</span>)<br>plt.plot(x,y2,linestyle=<span class="hljs-string">&#x27;--&#x27;</span>)<br>plt.plot(x,y3,linestyle=<span class="hljs-string">&#x27;-.&#x27;</span>)<br>plt.plot(x,y4,linestyle=<span class="hljs-string">&#x27;:&#x27;</span>)<br>plt.plot(x,y5,linestyle=<span class="hljs-string">&#x27;&#x27;</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><p>linestyle关键字‘-‘表示实线，’–’表示虚线，’:.’表示点虚线，’:’表示点线，’’表示隐藏线</p><ol start="3"><li>设置粗细</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">Fig1=plt.figure()<br>plt.plot(x,y1,linewidth=<span class="hljs-number">0.5</span>)<br>plt.plot(x,y2,linewidth=<span class="hljs-number">1</span>)<br>plt.plot(x,y3,linewidth=<span class="hljs-number">1.5</span>)<br>plt.plot(x,y4,linewidth=<span class="hljs-number">2</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><p>linewidth关键字 数字表示磅数，0.5~3为宜</p><ol start="4"><li>设置标记</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">Fig1=plt.figure()<br>plt.plot(x,y1,marker=<span class="hljs-string">&#x27;.&#x27;</span>)<br>plt.plot(x,y2,marker=<span class="hljs-string">&#x27;o&#x27;</span>)<br>plt.plot(x,y3,marker=<span class="hljs-string">&#x27;^&#x27;</span>)<br>plt.plot(x,y4,marker=<span class="hljs-string">&#x27;s&#x27;</span>)<br>plt.plot(x,y5,marker=<span class="hljs-string">&#x27;D&#x27;</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><p>marker关键字，标记的尺寸可以由marksize关键字调整，3~9为宜</p><ol start="5"><li>综合应用：综合应用以上所有线条属性（隐藏线设置标记，是散点图，这种方式效率比plt.scatter()效率更高）</li></ol><p><strong>网格图</strong>：需要一个矩阵即可绘图，图像展示：imshow()、等高线：contour()、填充等高线：contourf()</p><p>仅展示imshow() 函数，其他两个在深度学习中几乎用不到</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#准备数据</span><br>x=np.linspace(<span class="hljs-number">0</span>,<span class="hljs-number">10</span>,<span class="hljs-number">1000</span>)<br>I=np.sin(x)*np.cos(x).reshape(-<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)<br><br>Fig1=plt.figure()<br>plt.imshow(I)<br>plt.show()<br></code></pre></td></tr></table></figure><p>本身imshow是用来展示图像的，所以要准备数据生成一个。所有网格图中，还可以配置颜色条，但是只能在Matlab方式中进行此操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">Fig1=plt.figure()<br>plt.imshow(I)<br>plt.colorbar()<br>plt.show()<br></code></pre></td></tr></table></figure><p><strong>统计图</strong>：直方图：hist()</p><p>只演示hist()函数，因为其他函数主要出现在数据分析领域</p><p>为了避免将直方图hist与条形图bar弄混，现说明：条形图bar可以用plot替代，hist则是统计学的函数，是为了看清某分布的均值和标准差</p>]]></content>
    
    
    <categories>
      
      <category>ML/DL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>ML/DL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/10/27/hello-world/"/>
    <url>/2025/10/27/hello-world/</url>
    
    <content type="html"><![CDATA[<p>大家好，我是Surge，这是我的博客，我会记录一些学习技术的过程</p><p>(^__^)</p>]]></content>
    
    
    <categories>
      
      <category>碎碎念</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
